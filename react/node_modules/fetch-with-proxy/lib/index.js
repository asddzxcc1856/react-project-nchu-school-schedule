'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = fetch;

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _proxyFromEnv = require('proxy-from-env');

var _url = require('url');

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _tunnelAgent = require('tunnel-agent');

var _tunnelAgent2 = _interopRequireDefault(_tunnelAgent);

var _nodeAbortController = require('node-abort-controller');

var _nodeAbortController2 = _interopRequireDefault(_nodeAbortController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DefaultOptions = {
    keepAlive: true,
    timeout: 1000,
    keepAliveMsecs: 500,
    maxSockets: 200,
    maxFreeSockets: 5,
    maxCachedSessions: 500
};

var selectAgentOptions = function selectAgentOptions(options) {
    var _DefaultOptions$optio = _extends({}, DefaultOptions, options),
        keepAlive = _DefaultOptions$optio.keepAlive,
        timeout = _DefaultOptions$optio.timeout,
        keepAliveMsecs = _DefaultOptions$optio.keepAliveMsecs,
        maxSockets = _DefaultOptions$optio.maxSockets,
        maxFreeSockets = _DefaultOptions$optio.maxFreeSockets,
        maxCachedSessions = _DefaultOptions$optio.maxCachedSessions;

    return {
        keepAlive: keepAlive,
        timeout: timeout,
        keepAliveMsecs: keepAliveMsecs,
        maxSockets: maxSockets,
        maxFreeSockets: maxFreeSockets,
        maxCachedSessions: maxCachedSessions
    };
};

var capitalizeFirstLetter = function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase().concat(string.slice(1));
};

var parseProxy = function parseProxy(url, proxyurl) {
    var proxyObject = (0, _url.parse)(proxyurl || '');
    var proxyProtocol = proxyObject.protocol.replace(':', '');
    var proxyPort = proxyObject.port || (proxyProtocol === 'https' ? 443 : 80);
    proxyObject.port = proxyPort;
    proxyObject.tunnelMethod = url.protocol.replace(':', '').concat('Over').concat(capitalizeFirstLetter(proxyProtocol));
    return proxyObject;
};

var chooseAgent = function chooseAgent(url, options) {
    return url.protocol === 'https:' ? new _https2.default.Agent(options) : new _http2.default.Agent(options);
};

var buildTunnel = function buildTunnel(proxy, options) {
    return _tunnelAgent2.default[proxy.tunnelMethod](_extends({}, options, {
        proxy: {
            port: proxy.port,
            host: proxy.hostname,
            proxyAuth: proxy.auth
        } }));
};

function fetch(url, options) {
    var opts = options || {};
    var AgentOptions = selectAgentOptions(opts);
    var parsedURL = (0, _url.parse)(url);
    var proxyurl = (0, _proxyFromEnv.getProxyForUrl)(parsedURL.href);
    var agent = void 0;
    if (proxyurl) {
        var parsedProxyURL = parseProxy(parsedURL, proxyurl);
        if (parsedProxyURL.tunnelMethod.startsWith('httpOver')) {
            parsedURL.path = parsedURL.protocol.concat('//').concat(parsedURL.host).concat(parsedURL.path);
            parsedURL.port = parsedProxyURL.port;
            parsedURL.host = parsedProxyURL.host;
            parsedURL.hostname = parsedProxyURL.hostname;
            parsedURL.auth = parsedProxyURL.auth;
            agent = chooseAgent(parsedURL, AgentOptions);
        } else {
            agent = buildTunnel(parsedProxyURL, AgentOptions) || chooseAgent(parsedURL, AgentOptions);
        }
    } else {
        agent = chooseAgent(parsedURL, AgentOptions);
    }
    if (!opts.signal) {
        var controller = new _nodeAbortController2.default();
        opts.signal = controller.signal;
    }
    opts.signal.addEventListener('abort', function () {
        if (agent.destroy) {
            agent.destroy();
        }
        agent = null;
    });

    return (0, _nodeFetch2.default)(parsedURL, _extends({}, options, {
        agent: agent
    }));
}